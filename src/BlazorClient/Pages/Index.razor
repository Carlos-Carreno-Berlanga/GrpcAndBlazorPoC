@page "/"
@using Google.Protobuf.WellKnownTypes
@using System.Threading;
@using Grpc.Core;
@using System;
@using Microsoft.Extensions.Logging;
@inject SamuraiPackage.SamuraiPackageClient Client
@inject ILogger<Index> logger;

<h1>Classes</h1>

@if (responseList == null || responseList.Count == 0)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @if (responseList != null)
            {
                for (int i = 0; i < responseList.Count; i++)
                    if (@responseList[i] != null)
                    {
                        <tr>
                            <td><a href="/class/@responseList[i].Id">@responseList[i].Name -- @i</a></td>
                        </tr>
                    }
            }
        </tbody>
    </table>
}

@code {


    AsyncServerStreamingCall<SamuraiReply> call;
    CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
    List<SamuraiReply> responseList = null;

    protected override void OnInitialized()
    {
        try
        {

            logger.LogInformation("HOLA");
            call = this.Client.GetSamurais(new Empty());
            responseList = new List<SamuraiReply>(10000);

        }
        catch (Exception e)
        {
            logger.LogInformation("aaaaa" + e.Message);
        }
    }

    int maxElements = 1000;
    int lastResponseListCounter = 0;
    bool shouldUpdate = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        try
        {
            lastResponseListCounter = responseList.Count;
            logger.LogInformation($" responselist.count=>{responseList.Count}");
            int numElements = 0;

            while (numElements < maxElements
                &&
                await call.ResponseStream.MoveNext(cancellationTokenSource.Token))
            {

                responseList.Add(call.ResponseStream.Current);
                numElements++;


            }
            if (numElements < maxElements)
            {
                shouldUpdate = false;
            }
            await Task.Delay(100);
            StateHasChanged();


        }
        catch (Exception Ex)
        {
            logger.LogInformation("FFF" + Ex.Message);
        }


    }

    protected override bool ShouldRender()
    {

        return shouldUpdate;

    }


}
